<?xml version="1.0" encoding="UTF-8"?>


<!-- ===== #28. mapper 기본 설정 ===== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<!-- ===== #29. 루트 엘리먼트 및 네임스페이스 설정하기(이 네임스페이스의 이름은 프로젝트 전체 내에서 반드시 고유해야만 한다.) ===== --> 
<mapper namespace="hy">

	<!-- 로그인 정보 확인하기 -->
	<select id="logincheck" parameterType="com.spring.bnb.model.MemberVO" resultType="com.spring.bnb.model.MemberVO">
		select * from member 
		where userid=#{userid} and pwd=#{pwd}
	</select>
	
	<!-- 로그인 한 유저가 등록 한 숙소가 있을경우 MemberVO의 myroom에 해당 RoomVO 저장 -->
	
	<select id="checkHostUser" parameterType="com.spring.bnb.model.MemberVO" resultType="com.spring.bnb.model.RoomVO">
		select * from member M join room R on M.userid = R.fk_userid
		where R.fk_userid = #{userid}
	</select>
	
	<!-- roomcode를 통해 숙소정보 가져오기 -->
	<select id="getRoomByCode" parameterType="String" resultType="com.spring.bnb.model.RoomVO">	
		select*from room R join roomtype T on R.fk_roomType_idx = T.roomType_idx
		            	   join buildType_detail B on R.fk_buildType_detail_idx = B.buildType_detail_idx
		where roomcode=#{roomcode}
	</select>
	
	<!-- RoomVO에 호스트정보 입력하기 -->
	<select id="getHost" parameterType="String" resultType="com.spring.bnb.model.MemberVO">	
		select*
		from member
		where userid=#{fk_userid}
	</select>
	
	<!-- RoomVO에 ReviewList입력하기 -->
	<select id="getReviewListDAO" parameterType="String" resultType="com.spring.bnb.model.ReviewVO">	
		select review_idx,fk_roomcode,fk_userid,correct,communicate,clean,position,checkin,value,review_content,review_writedate
		from review
		where fk_roomcode = #{_parameter}
	</select>
	
	<!-- roomVO의 reviewList(reviewVO)에 user 입력하기 -->
	<select id="getReviewer" parameterType="String" resultType="com.spring.bnb.model.MemberVO">
		select*from member where userid = #{fk_userid}
	</select>
	
	<resultMap type="HashMap" id="bedroomMap">
		<result property="BED_IDX" column="BED_IDX" javaType="String" />
		<result property="BEDTYPE" column="BEDTYPE" javaType="String" />
		<result property="BEDCOUNT" column="BEDCOUNT" javaType="String" />
		<result property="FK_BEDROOM_IDX" column="FK_BEDROOM_IDX" javaType="String" />
	</resultMap>
	
	<!-- 침실/침대 roomVO에 입력하기 -->
	<select id="getBedroomList" parameterType="String" resultMap="bedroomMap">
		select * from room R join bedroom BR on R.roomcode = BR.fk_roomcode 
        join bed B on BR.bedroom_idx=B.fk_bedroom_idx
        join bedobj O on O.bedobj_idx = B.fk_bedobj_idx
        where R.roomcode = #{roomcode}
	</select>
	
	<resultMap type="HashMap" id="optionMap">
		<result property="OPTIONNAME" column="OPTIONNAME" javaType="String" />
		<result property="OPTIONICON" column="OPTIONICON" javaType="String" />
	</resultMap>
	
	<!-- 옵션정보 RoomVO에 입력하기 -->
	<select id="getOptionList" parameterType="String" resultMap="optionMap">
		select * from roomoption R join options O on R.fk_option_idx=O.option_idx 
		where R.fk_roomcode = #{roomcode}
	</select>
	
	<resultMap type="HashMap" id="ruleMap">
		<result property="RULENAME" column="RULE_NAME" javaType="String" />
		<result property="RULEICON" column="RULE_ICON" javaType="String" />
	</resultMap>
	
	<!-- 이용규칙정보 RoomVO에 입력하기 -->
	<select id="getRuleList" parameterType="String" resultMap="ruleMap">
		select*from roomrule R join allrule A on R.fk_rule_idx=A.rule_idx 
		where R.fk_roomcode=#{roomcode}
	</select>
	
	<!-- RoomVO에  likeCount 입력하기 -->
	<select id="getRoomLikeCount" parameterType="String" resultType="Integer">
		select count(*) from likeroom where fk_roomcode=#{roomcode}
	</select>
	
	<!-- RoomVO에  roomImgList 입력하기 -->
	<select id="getRoomImgList" parameterType="String" resultType="String">
		select img from roomImg where fk_roomcode=#{roomcode}
	</select>
	
	<!-- 관심숙소 등록하기 -->
	<insert id="insertLikeRoom" parameterType="HashMap">
		insert into likeroom(LIKE_IDX,FK_ROOMCODE,FK_USERID,SAVETITLE)
		values(LIKE_IDX_SEQ.nextval,#{ROOMCODE},#{USERID},#{SAVETITLE})
	</insert>
	
	<resultMap type="HashMap" id="LikeRoom">
		<result property="roomcode" column="ROOMCODE" javaType="String" />
		<result property="saveTitle" column="SAVETITLE" javaType="String"/>
		<result property="roomMainImg" column="ROOMMAINIMG" javaType="String"/>
	</resultMap>
	
	<!-- 로그인 한 유저의 관심 숙소 불러오기 -->
	<select id="getMyLikeRoomList" parameterType="String" resultMap="LikeRoom">
		select*from likeroom L join Room R on L.fk_roomcode=R.roomcode
		where L.fk_userid=#{userid}
	</select>
	
	<!-- 아이디 중복검사 -->
	<select id="checkDuplicateID" parameterType="String" resultType="Integer">
		select count(*) from member where userid=#{userid}
	</select>

	<!-- 회원가입 -->
	<insert id="insertMember" parameterType="com.spring.bnb.model.MemberVO">
		insert into member(USERID,USERNAME,PWD,EMAIL,PHONE,POST,ADDR,DETAILADDR,GENDER,BIRTHDAY,INTRODUCTION,MEMBERSTATUS,PROFILEIMG,WARNCOUNT,REGDATE) 
		values(#{userid},#{username},#{pwd},#{email},#{phone},#{post},#{addr},#{detailAddr},#{gender},#{birthday},#{introduction},default,#{profileimg},default,default)
	</insert>
	
	<!-- 주변 숙소 불러오기 -->
	<select id="getRecommendRoomList" parameterType="String" resultType="com.spring.bnb.model.RoomVO">
		select * from room where roomsigungu=#{sigungu}
	</select>
	
	<!-- 침실 정보 저장하기 -->
	<insert id="insertbedroom" parameterType="String">
		insert into bedroom(bedroom_idx,fk_roomcode) values(bedroom_idx_seq.nextval,#{rooomcode})
	</insert>
	
	<!-- 침실번호 채번하기 -->
	<select id="getBedroomIdx" resultType="Integer">
		select bedroom_idx_seq.currval from dual
	</select>
	
	<!-- 침대정보 저장하기 -->
	<insert id="insertbed" parameterType="HashMap">
		insert into bed(bed_idx,bedCount,fk_bedroom_idx,fk_bedobj_idx) values(bed_idx_seq.nextval,#{BEDCOUNT},#{BEDROOMIDX},#{BEDOBJIDX})
	</insert>
	
	<!-- 해당 숙소의 리뷰 가져오기(페이징 및 검색) -->
	<select id="getAllReviewList" parameterType="HashMap" resultType="com.spring.bnb.model.ReviewVO">
		select*from(
		    select rownum as rno,REVIEW_IDX,FK_ROOMCODE,FK_USERID,CORRECT,COMMUNICATE,CLEAN,POSITION,CHECKIN,VALUE,REVIEW_CONTENT,HOSTANSWER,to_char(REVIEW_WRITEDATE,'yyyy-mm-dd') as REVIEW_WRITEDATE 
		    from review
		    where fk_roomcode=#{ROOMCODE} and review_content=#{REVIEWSEARCHWORD})
		where rno between #{STARTRNO} and #{ENDRNO}
	</select>
	
	<!-- 해당 숙소의 리뷰 검색하기 -->
	<select id="getSearchReview" parameterType="HashMap" resultType="com.spring.bnb.model.ReviewVO">
		select*from review where fk_roomcode=#{ROOMCODE} and review_content like '%'||#{REVIEWSEARCHWORD}||'%'
	</select>
	
	<!-- 작성된 리뷰 저장하기 -->
	<insert id="insertReview" parameterType="com.spring.bnb.model.ReviewVO">
		insert into review(REVIEW_IDX,FK_ROOMCODE,FK_USERID,CORRECT,COMMUNICATE,CLEAN,POSITION,CHECKIN,VALUE,REVIEW_CONTENT,HOSTANSWER,REVIEW_WRITEDATE) 
		values(REVIEW_IDX_seq.nextval,#{fk_roomcode},#{fk_userid},#{correct},#{communicate},#{clean},#{position},#{checkin},#{value},#{review_content},null,default)
	</insert>
	
	<!-- 숙소상세 예약현황 가져오기 -->
	<select id="reservationCheck" parameterType="String" resultType="com.spring.bnb.model.ReservationVO">
		select to_char(rsv_checkindate,'yyyy-mm-dd') as rsv_checkindate, to_char(rsv_checkoutdate,'yyyy-mm-dd') as rsv_checkoutdate
		from reservation where fk_roomcode = #{roomcode}
	</select>
	
	<resultMap type="HashMap" id="StarPointMap">
		<result property="correct" column="correct" javaType="Integer" />
		<result property="communicate" column="communicate" javaType="Integer" />
		<result property="clean" column="clean" javaType="Integer" />
		<result property="position" column="position" javaType="Integer" />
		<result property="checkin" column="checkin" javaType="Integer" />
		<result property="value" column="value" javaType="Integer" />
	</resultMap>
	<!-- 숙소 별 별점 알아오기 -->
	<select id="getStarPoint" parameterType="String" resultMap="StarPointMap">
		select avg(correct) as correct, avg(communicate) as communicate, avg(clean) as clean,
			   avg(position) as position, avg(checkin) as checkin, avg(value) as value 
		from review where fk_roomcode=#{roomcode}
	</select>
	
	<!-- 숙소 상세페이지에 들어갈때 마다 viewCount증가시키기 -->
	<update id="roomViewCountUp" parameterType="String">
		update room set viewCount=viewCount+1 where roomcode=#{roomcode}
	</update>
	
	<!-- header의 검색을 위한 시도 데이터들 가져오기 -->
	<select id="getSearchSido" resultType="String">
		select distinct roomsido from room where roomsido like '%'||#{searchword}||'%'
	</select>
	
	<!-- 관심 숙소 중복 검색 -->
	<select id="checkLikeRoom" parameterType="HashMap" resultType="Integer">
		select count(*) from likeroom where fk_userid=#{USERID} and fk_roomcode=#{ROOMCODE}
	</select>
	
 	<resultMap type="HashMap" id="incomeMap">
		<result property="roomcode" column="roomcode" javaType="String" />
		<result property="totalprice" column="totalprice" javaType="Integer" />
		<result property="paydate" column="paydate" javaType="String" />
	</resultMap>
	<!-- 호스트의 수입 가져오기 -->
	<select id="getHostIncome" parameterType="String" resultMap="incomeMap">
		select v.fk_roomcode as roomcode,sum(totalPrice) as totalprice,to_char(v.paydate,'mm') as paydate
		from Room r join reservation v on v.fk_roomcode=r.roomcode 
		where r.fk_userid=#{userid}
		group by grouping sets ((v.fk_roomcode,to_char(v.paydate,'mm')))
	</select>
	
	<select id="MemberCheckByIdAndEmail" parameterType="HashMap" resultType="Integer">
		select count(*) from member where userid=#{ID} and email=#{EMAIL}
	</select>
</mapper>

